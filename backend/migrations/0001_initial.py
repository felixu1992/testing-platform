# Generated by Django 3.1.2 on 2020-11-14 09:00

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CaseInfo',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=32, unique=True, validators=[django.core.validators.MinLengthValidator(1, message='最小长度为 1'), django.core.validators.MaxLengthValidator(32, message='最大长度为 32')], verbose_name='用例名称')),
                ('remark', models.CharField(blank=True, max_length=255, null=True, validators=[django.core.validators.MinLengthValidator(1, message='最小长度为 1'), django.core.validators.MaxLengthValidator(255, message='最大长度为 255')], verbose_name='项目备注')),
                ('method', models.CharField(max_length=8, validators=[django.core.validators.MinLengthValidator(1, message='最小长度为 1'), django.core.validators.MaxLengthValidator(8, message='最大长度为 8')], verbose_name='请求方法')),
                ('host', models.CharField(blank=True, max_length=255, null=True, verbose_name='请求 host，没填会使用项目的')),
                ('path', models.CharField(max_length=255, validators=[django.core.validators.MinLengthValidator(1, message='最小长度为 1'), django.core.validators.MaxLengthValidator(255, message='最大长度为 255')], verbose_name='请求地址')),
                ('params', models.JSONField(blank=True, null=True, verbose_name='请求参数')),
                ('extend_keys', models.TextField(blank=True, null=True, verbose_name='扩展字段')),
                ('extend_values', models.TextField(blank=True, null=True, verbose_name='扩展值')),
                ('headers', models.JSONField(blank=True, null=True, verbose_name='请求头')),
                ('expected_keys', models.TextField(blank=True, null=True, verbose_name='预期字段')),
                ('expected_values', models.TextField(blank=True, null=True, verbose_name='预期值')),
                ('check_step', models.TextField(blank=True, null=True, verbose_name='校验步骤')),
                ('expected_http_status', models.IntegerField(default=200, validators=[django.core.validators.MinValueValidator(1, message='最小值为 1')], verbose_name='Http 状态码')),
                ('check_status', models.BooleanField(default=False, verbose_name='是否校验 Http 状态')),
                ('run', models.BooleanField(default=True, verbose_name='是否运行')),
                ('owner', models.IntegerField(validators=[django.core.validators.MinValueValidator(1, message='最小值为 1')], verbose_name='拥有者')),
                ('developer', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(1, message='最小值为 1')], verbose_name='接口开发者')),
                ('notify', models.BooleanField(default=False, verbose_name='是否通知开发者')),
                ('project_id', models.IntegerField(validators=[django.core.validators.MinValueValidator(1, message='最小值为 1')], verbose_name='关联项目 id')),
                ('sort', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(1, message='最小值为 1')], verbose_name='接口排序')),
            ],
            options={
                'db_table': 'platform_case_info',
                'ordering': ['sort', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Contactor',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=32, unique=True, validators=[django.core.validators.MinLengthValidator(1, message='最小长度为 1'), django.core.validators.MaxLengthValidator(32, message='最大长度为 32')], verbose_name='联系人名称')),
                ('email', models.CharField(max_length=64, unique=True, validators=[django.core.validators.MinLengthValidator(1, message='最小长度为 1'), django.core.validators.MaxLengthValidator(64, message='最大长度为 64'), django.core.validators.EmailValidator(message='请输入正确的邮箱账号')], verbose_name='邮箱')),
                ('phone', models.CharField(max_length=16, unique=True, validators=[django.core.validators.MinLengthValidator(1, message='最小长度为 1'), django.core.validators.MaxLengthValidator(16, message='最大长度为 16'), django.core.validators.RegexValidator(message='请输入正确的手机号', regex='^1[3,4,5,7,8]\\d{9}$')], verbose_name='手机号')),
                ('owner', models.IntegerField(validators=[django.core.validators.MinValueValidator(1, message='最小值为 1')], verbose_name='项目拥有者')),
                ('group_id', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(1, message='最小值为 1')], verbose_name='分组 id')),
            ],
            options={
                'db_table': 'platform_contactor',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ContactorGroup',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=32, validators=[django.core.validators.MinLengthValidator(1, message='最小长度为 1'), django.core.validators.MaxLengthValidator(32, message='最大长度为 32')], verbose_name='分组名称')),
                ('owner', models.IntegerField(validators=[django.core.validators.MinValueValidator(1, message='最小值为 1')], verbose_name='分组拥有者')),
            ],
            options={
                'db_table': 'platform_contactor_group',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=32, unique=True, validators=[django.core.validators.MinLengthValidator(1, message='最小长度为 1'), django.core.validators.MaxLengthValidator(32, message='最大长度为 32')], verbose_name='文件名称')),
                ('path', models.CharField(max_length=255, validators=[django.core.validators.MinLengthValidator(1, message='最小长度为 1'), django.core.validators.MaxLengthValidator(255, message='最大长度为 255')], verbose_name='文件路径')),
                ('remark', models.CharField(blank=True, max_length=255, null=True, validators=[django.core.validators.MaxLengthValidator(255, message='最大长度为 255')], verbose_name='文件描述')),
                ('owner', models.IntegerField(validators=[django.core.validators.MinValueValidator(1, message='最小值为 1')], verbose_name='文件拥有者')),
                ('group_id', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(1, message='最小值为 1')], verbose_name='分组 id')),
            ],
            options={
                'db_table': 'platform_file',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='FileGroup',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=32, validators=[django.core.validators.MinLengthValidator(1, message='最小长度为 1'), django.core.validators.MaxLengthValidator(32, message='最大长度为 32')], verbose_name='分组名称')),
                ('owner', models.IntegerField(validators=[django.core.validators.MinValueValidator(1, message='最小值为 1')], verbose_name='分组拥有者')),
            ],
            options={
                'db_table': 'platform_file_group',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=32, validators=[django.core.validators.MinLengthValidator(1, message='最小长度为 1'), django.core.validators.MaxLengthValidator(32, message='最大长度为 32')], verbose_name='项目名称')),
                ('remark', models.CharField(default=None, max_length=255, validators=[django.core.validators.MaxLengthValidator(255, message='最大长度为 255')], verbose_name='项目备注')),
                ('headers', models.JSONField(blank=True, null=True, verbose_name='请求头')),
                ('host', models.CharField(blank=True, max_length=255, null=True, verbose_name='项目统一 host')),
                ('owner', models.IntegerField(validators=[django.core.validators.MinValueValidator(1, message='最小值为 1')], verbose_name='项目拥有者')),
                ('group_id', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(1, message='最小值为 1')], verbose_name='分组 id')),
                ('notify', models.BooleanField(blank=True, default=True, null=True, verbose_name='是否发送通知')),
            ],
            options={
                'db_table': 'platform_project',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProjectGroup',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=32, validators=[django.core.validators.MinLengthValidator(1, message='最小长度为 1'), django.core.validators.MaxLengthValidator(32, message='最大长度为 32')], verbose_name='分组名称')),
                ('owner', models.IntegerField(validators=[django.core.validators.MinValueValidator(1, message='最小值为 1')], verbose_name='分组拥有者')),
            ],
            options={
                'db_table': 'platform_project_group',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Record',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('group_id', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(1, message='最小值为 1')], verbose_name='分组 id')),
                ('project_id', models.IntegerField(validators=[django.core.validators.MinValueValidator(1, message='最小值为 1')], verbose_name='关联项目 id')),
                ('remark', models.CharField(default=None, max_length=255, validators=[django.core.validators.MinLengthValidator(1, message='最小长度为 1'), django.core.validators.MaxLengthValidator(255, message='最大长度为 255')], verbose_name='记录描述')),
                ('owner', models.IntegerField(validators=[django.core.validators.MinValueValidator(1, message='最小值为 1')], verbose_name='拥有者')),
                ('passed', models.IntegerField(default=0, verbose_name='通过数')),
                ('failed', models.IntegerField(default=0, verbose_name='失败数')),
                ('ignored', models.IntegerField(default=0, verbose_name='忽略数')),
                ('total', models.IntegerField(default=0, verbose_name='总数')),
            ],
            options={
                'db_table': 'platform_record',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('id', models.IntegerField(default=0, primary_key=True, serialize=False, validators=[django.core.validators.MinValueValidator(1, message='最小值为 1')], verbose_name='等同于用例 id')),
                ('name', models.CharField(max_length=32, unique=True, validators=[django.core.validators.MinLengthValidator(1, message='最小长度为 1'), django.core.validators.MaxLengthValidator(32, message='最大长度为 32')], verbose_name='用例名称')),
                ('remark', models.CharField(default=None, max_length=255, validators=[django.core.validators.MinLengthValidator(1, message='最小长度为 1'), django.core.validators.MaxLengthValidator(255, message='最大长度为 255')], verbose_name='项目备注')),
                ('method', models.CharField(max_length=8, validators=[django.core.validators.MinLengthValidator(1, message='最小长度为 1'), django.core.validators.MaxLengthValidator(8, message='最大长度为 8')], verbose_name='请求方法')),
                ('host', models.CharField(default=None, max_length=255, verbose_name='请求 host，没填会使用项目的')),
                ('path', models.CharField(max_length=255, validators=[django.core.validators.MinLengthValidator(1, message='最小长度为 1'), django.core.validators.MaxLengthValidator(255, message='最大长度为 255')], verbose_name='请求地址')),
                ('params', models.JSONField(blank=True, null=True, verbose_name='请求参数')),
                ('extend_keys', models.TextField(blank=True, null=True, verbose_name='扩展字段')),
                ('extend_values', models.TextField(blank=True, null=True, verbose_name='扩展值')),
                ('headers', models.JSONField(blank=True, null=True, verbose_name='请求头')),
                ('expected_keys', models.TextField(blank=True, null=True, verbose_name='预期字段')),
                ('expected_values', models.TextField(blank=True, null=True, verbose_name='预期值')),
                ('check_step', models.TextField(blank=True, null=True, verbose_name='校验步骤')),
                ('expected_http_status', models.IntegerField(default=200, validators=[django.core.validators.MinValueValidator(1, message='最小值为 1')], verbose_name='Http 状态码')),
                ('check_status', models.BooleanField(default=False, verbose_name='是否校验 Http 状态')),
                ('run', models.BooleanField(default=True, verbose_name='是否运行')),
                ('owner', models.IntegerField(validators=[django.core.validators.MinValueValidator(1, message='最小值为 1')], verbose_name='拥有者')),
                ('developer', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(1, message='最小值为 1')], verbose_name='接口开发者')),
                ('notify', models.BooleanField(default=False, verbose_name='是否通知开发者')),
                ('project_id', models.IntegerField(validators=[django.core.validators.MinValueValidator(1, message='最小值为 1')], verbose_name='关联项目 id')),
                ('sort', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(1, message='最小值为 1')], verbose_name='接口排序')),
                ('status', models.CharField(max_length=8, validators=[django.core.validators.MinLengthValidator(1, message='最小长度为 1'), django.core.validators.MaxLengthValidator(8, message='最大长度为 8')], verbose_name='执行状态')),
                ('response_code', models.CharField(blank=True, max_length=8, null=True, validators=[django.core.validators.MinLengthValidator(1, message='最小长度为 1'), django.core.validators.MaxLengthValidator(8, message='最大长度为 8')], verbose_name='响应状态')),
                ('http_status', models.IntegerField(default=200, validators=[django.core.validators.MinValueValidator(1, message='最小值为 1')], verbose_name='Http 状态码')),
                ('response_content', models.TextField(blank=True, null=True, verbose_name='响应状态')),
                ('time_used', models.IntegerField(default=0, verbose_name='请求耗时')),
                ('record_id', models.IntegerField(validators=[django.core.validators.MinValueValidator(1, message='最小值为 1')], verbose_name='记录 id')),
            ],
            options={
                'db_table': 'platform_report',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=32, unique=True, validators=[django.core.validators.MinLengthValidator(1, message='最小长度为 1'), django.core.validators.MaxLengthValidator(32, message='最大长度为 32')], verbose_name='用户名')),
                ('email', models.CharField(max_length=64, unique=True, validators=[django.core.validators.MinLengthValidator(1, message='最小长度为 1'), django.core.validators.MaxLengthValidator(64, message='最大长度为 64'), django.core.validators.EmailValidator(message='请输入正确的邮箱账号')], verbose_name='邮箱')),
                ('phone', models.CharField(max_length=16, unique=True, validators=[django.core.validators.MinLengthValidator(1, message='最小长度为 1'), django.core.validators.MaxLengthValidator(16, message='最大长度为 16'), django.core.validators.RegexValidator(message='请输入正确的手机号', regex='^1[3,4,5,7,8]\\d{9}$')], verbose_name='手机号')),
                ('password', models.CharField(max_length=128, validators=[django.core.validators.MinLengthValidator(1, message='最小长度为 1'), django.core.validators.MaxLengthValidator(16, message='最大长度为 16')], verbose_name='密码')),
                ('avatar', models.CharField(blank=True, max_length=255, null=True, verbose_name='头像')),
            ],
            options={
                'db_table': 'platform_user',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='report',
            index=models.Index(fields=['owner', 'record_id'], name='report_owner_record_idx'),
        ),
        migrations.AddIndex(
            model_name='record',
            index=models.Index(fields=['owner', 'group_id'], name='record_owner_group_idx'),
        ),
        migrations.AddIndex(
            model_name='record',
            index=models.Index(fields=['owner', 'group_id', 'project_id'], name='record_owner_group_project_idx'),
        ),
        migrations.AddConstraint(
            model_name='projectgroup',
            constraint=models.UniqueConstraint(fields=('owner', 'name'), name='project_group_owner_name_idx'),
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['owner', 'group_id'], name='project_owner_group_idx'),
        ),
        migrations.AddConstraint(
            model_name='project',
            constraint=models.UniqueConstraint(fields=('owner', 'name'), name='project_owner_name_idx'),
        ),
        migrations.AddConstraint(
            model_name='filegroup',
            constraint=models.UniqueConstraint(fields=('owner', 'name'), name='file_group_owner_name_idx'),
        ),
        migrations.AddIndex(
            model_name='file',
            index=models.Index(fields=['owner', 'group_id'], name='file_owner_group_idx'),
        ),
        migrations.AddConstraint(
            model_name='file',
            constraint=models.UniqueConstraint(fields=('owner', 'name'), name='file_owner_name_idx'),
        ),
        migrations.AddConstraint(
            model_name='contactorgroup',
            constraint=models.UniqueConstraint(fields=('owner', 'name'), name='contactor_group_owner_name_idx'),
        ),
        migrations.AddIndex(
            model_name='contactor',
            index=models.Index(fields=['owner', 'group_id'], name='contactor_owner_group_idx'),
        ),
        migrations.AddConstraint(
            model_name='contactor',
            constraint=models.UniqueConstraint(fields=('owner', 'name'), name='contactor_owner_name_idx'),
        ),
        migrations.AddConstraint(
            model_name='contactor',
            constraint=models.UniqueConstraint(fields=('owner', 'email'), name='contactor_owner_email_idx'),
        ),
        migrations.AddConstraint(
            model_name='contactor',
            constraint=models.UniqueConstraint(fields=('owner', 'phone'), name='contactor_owner_phone_idx'),
        ),
        migrations.AddIndex(
            model_name='caseinfo',
            index=models.Index(fields=['owner', 'project_id', 'developer'], name='project_owner_developer_idx'),
        ),
        migrations.AddConstraint(
            model_name='caseinfo',
            constraint=models.UniqueConstraint(fields=('owner', 'project_id', 'sort'), name='case_owner_project_sort_idx'),
        ),
    ]
